---
import * as hn from "../../../utils/hn";

import * as API from "../../../utils/api";

import { clamp } from "../../../utils/math";

const { url } = Astro;

const { origin, searchParams, pathname } = url;

const api = API.of(origin);

const parsedLimit = +(searchParams.get("limit") ?? "");
const defaultLimit = 10;
const limit = isNaN(parsedLimit)
  ? defaultLimit
  : parsedLimit <= 0
    ? defaultLimit
    : parsedLimit;

const defaultOffset = 0;
const parsedOffset = +(searchParams.get("offset") ?? "");
const offset = isNaN(parsedOffset)
  ? defaultOffset
  : parsedOffset < 0
    ? defaultOffset
    : parsedOffset;

const type = searchParams.get("type") ?? "top";

const allIds: number[] = [];

try {
  const stories = await hn.api.fetch(`${type}stories`);

  for (const id of stories) {
    allIds.push(id);
  }
} catch (e) {}

const ids = [...allIds.slice(offset, clamp(offset + limit, 0, allIds.length))];

const stories = await Promise.all(
  ids.map((id) => {
    return (async function () {
      try {
        return await api.get("items", { id });
      } catch (e) {
        return { id, error: `${e}` };
      }
    })();
  }),
);

const prevOffset = clamp(offset - limit, 0, offset);
const nextOffset = offset + limit;

const originUrl = new URL(`${origin}${pathname}`);

const prevUrl = new URL(`${originUrl}`);
prevUrl.searchParams.set("type", type);
prevUrl.searchParams.set("limit", `${limit}`);
prevUrl.searchParams.set("offset", `${prevOffset}`);

const nextUrl = new URL(`${originUrl}`);
nextUrl.searchParams.set("type", type);
nextUrl.searchParams.set("limit", `${limit}`);
nextUrl.searchParams.set("offset", `${nextOffset}`);

const payload = {
  type,
  prev: offset <= 0 ? null : `${prevUrl}`,
  next: allIds.length <= offset + limit ? null : `${nextUrl}`,
  data: stories.filter((story) => story !== null),
};

return new Response(JSON.stringify(payload), {
  headers: {
    "content-type": "application/json",
  },
});
---
